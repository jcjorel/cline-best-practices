###############################################################################
# IMPORTANT: This header comment is designed for GenAI code review and maintenance
# Any GenAI tool working with this file MUST preserve and update this header
###############################################################################
# [GenAI coding tool directive]
# - Maintain this header with all modifications
# - Update History section with each change
# - Keep only the 4 most recent records in the history section. Sort from newer to older.
# - Preserve Intent, Design, and Constraints sections
# - Use this header as context for code reviews and modifications
# - Ensure all changes align with the design principles
# - Respect system prompt directives at all times
###############################################################################
# [Source file intent]
# This file contains unit tests for the Documentation Generator Agent component 
# of the HSTC implementation. It tests the agent's ability to analyze, validate,
# and generate HSTC-compliant documentation for source files.
###############################################################################
# [Source file design principles]
# - Test each documentation generation capability in isolation
# - Verify correct extraction and formatting of documentation sections
# - Check documentation validation against HSTC compliance rules
###############################################################################
# [Source file constraints]
# - Must use pytest fixtures from conftest.py
# - Should not depend on actual LLM API calls
###############################################################################
# [Dependencies]
# system:pytest
# codebase:src/dbp_cli/commands/hstc_agno/agents.py
# codebase:src/dbp_cli/commands/hstc_agno/tests/conftest.py
###############################################################################
# [GenAI tool change history]
# 2025-05-12T08:14:30Z : Initial implementation by CodeAssistant
# * Created unit tests for Documentation Generator Agent
###############################################################################

import pytest
from ..agents import DocumentationGeneratorAgent
from unittest.mock import patch, MagicMock


def test_doc_generator_initialization():
    """
    [Function intent]
    Test that the Documentation Generator Agent initializes correctly.
    
    [Design principles]
    Verifies basic object creation and properties are correctly set.
    
    [Implementation details]
    Creates a DocumentationGeneratorAgent instance and checks its attributes.
    """
    generator = DocumentationGeneratorAgent()
    assert hasattr(generator, "generated_documentation")
    assert generator.generated_documentation == {}


def test_extract_header_sections():
    """
    [Function intent]
    Test extracting structured sections from a header comment.
    
    [Design principles]
    Verifies accurate parsing of HSTC header format.
    
    [Implementation details]
    Provides a sample header with standard sections and verifies extraction.
    """
    generator = DocumentationGeneratorAgent()
    
    header_text = '''"""
###############################################################################
# IMPORTANT: This header comment is designed for GenAI code review and maintenance
# Any GenAI tool working with this file MUST preserve and update this header
###############################################################################
# [GenAI coding tool directive]
# - Maintain this header with all modifications
# - Update History section with each change
# - Keep only the 4 most recent records in the history section. Sort from newer to older.
# - Preserve Intent, Design, and Constraints sections
# - Use this header as context for code reviews and modifications
# - Ensure all changes align with the design principles
# - Respect system prompt directives at all times
###############################################################################
# [Source file intent]
# This file contains test functionality.
###############################################################################
# [Source file design principles]
# - Keep it simple
# - Follow best practices
###############################################################################
# [Source file constraints]
# None
###############################################################################
# [Dependencies]
# codebase:other_file.py
# system:os
###############################################################################
# [GenAI tool change history]
# 2023-06-15T12:34:56Z : Initial documentation generated by HSTC tool
# * Added standardized header documentation
###############################################################################
"""'''
    
    result = generator._extract_header_sections(header_text)
    
    assert "intent" in result
    assert "This file contains test functionality." in result["intent"]
    
    assert "design_principles" in result
    assert "Keep it simple" in result["design_principles"]
    
    assert "constraints" in result
    assert "None" in result["constraints"]
    
    assert "dependencies" in result
    assert len(result["dependencies"]) == 2
    assert result["dependencies"][0]["kind"] == "codebase"
    assert result["dependencies"][0]["dependency"] == "other_file.py"
    
    assert "change_history" in result
    assert "2023-06-15T12:34:56Z" in result["change_history"][0]
    
    assert "raw_header" in result


def test_extract_section():
    """
    [Function intent]
    Test extracting a specific section from a header.
    
    [Design principles]
    Verifies ability to isolate and extract individual header sections.
    
    [Implementation details]
    Tests both existing and non-existing section extraction.
    """
    generator = DocumentationGeneratorAgent()
    
    header_text = '''"""
###############################################################################
# [Source file intent]
# This file contains test functionality.
###############################################################################
# [Source file design principles]
# - Keep it simple
# - Follow best practices
###############################################################################
"""'''
    
    # Test extracting existing section
    intent_result = generator._extract_section(header_text, "[Source file intent]")
    assert "This file contains test functionality." in intent_result
    
    principles_result = generator._extract_section(header_text, "[Source file design principles]")
    assert "Keep it simple" in principles_result
    assert "Follow best practices" in principles_result
    
    # Test extracting non-existing section
    constraints_result = generator._extract_section(header_text, "[Source file constraints]")
    assert constraints_result == ""


def test_extract_dependencies():
    """
    [Function intent]
    Test extracting dependencies from a header.
    
    [Design principles]
    Verifies correct parsing of dependency declarations with different formats.
    
    [Implementation details]
    Tests extraction of dependencies with and without explicit kind prefixes.
    """
    generator = DocumentationGeneratorAgent()
    
    header_text = '''"""
###############################################################################
# [Dependencies]
# codebase:other_file.py
# system:os
# regular_dependency
###############################################################################
"""'''
    
    result = generator._extract_dependencies(header_text)
    
    assert len(result) == 3
    assert result[0]["kind"] == "codebase"
    assert result[0]["dependency"] == "other_file.py"
    assert result[1]["kind"] == "system"
    assert result[1]["dependency"] == "os"
    assert result[2]["kind"] == "unknown"
    assert result[2]["dependency"] == "regular_dependency"


def test_extract_change_history():
    """
    [Function intent]
    Test extracting change history from a header.
    
    [Design principles]
    Verifies correct extraction of multi-line change history entries.
    
    [Implementation details]
    Tests extraction of change history with timestamps and details.
    """
    generator = DocumentationGeneratorAgent()
    
    header_text = '''"""
###############################################################################
# [GenAI tool change history]
# 2023-06-15T12:34:56Z : Initial documentation by HSTC tool
# * Added standardized header documentation
# 2023-06-14T10:20:30Z : Previous change by HSTC tool
# * Fixed typo in documentation
###############################################################################
"""'''
    
    result = generator._extract_change_history(header_text)
    
    assert len(result) == 2
    assert "2023-06-15T12:34:56Z" in result[0]
    assert "Initial documentation" in result[0]
    assert "2023-06-14T10:20:30Z" in result[1]
    assert "Previous change" in result[1]


@patch("src.dbp_cli.commands.hstc_agno.agents.AgnoAgent.invoke_llm")
def test_generate_file_header(mock_invoke_llm):
    """
    [Function intent]
    Test generation of file header documentation.
    
    [Design principles]
    Verifies proper LLM invocation and result handling for header generation.
    
    [Implementation details]
    Mocks the LLM invocation and tests the header generation method.
    """
    # Mock LLM response
    mock_response = {
        "intent": "Test file intent",
        "design_principles": "Test design principles",
        "constraints": "Test constraints"
    }
    mock_invoke_llm.return_value = mock_response
    
    generator = DocumentationGeneratorAgent()
    
    # Test data
    file_path = "test_file.py"
    file_content = "def test_function():\n    pass"
    file_metadata = {
        "language": "python",
        "file_type": "source_code",
        "header_comment": "",
        "dependencies": [{"name": "os", "kind": "system"}]
    }
    
    result = generator._generate_file_header(file_path, file_content, file_metadata)
    
    # Verify LLM was invoked
    mock_invoke_llm.assert_called_once()
    
    # Verify result structure
    assert "intent" in result
    assert "design_principles" in result
    assert "constraints" in result
    assert "dependencies" in result
    assert "raw_header" in result
    
    # Verify content
    assert result["intent"] == "Test file intent"
    assert result["design_principles"] == "Test design principles"
    assert result["constraints"] == "Test constraints"
    assert len(result["dependencies"]) >= 1


@patch("src.dbp_cli.commands.hstc_agno.agents.AgnoAgent.invoke_llm")
def test_generate_function_documentation(mock_invoke_llm):
    """
    [Function intent]
    Test generation of function documentation.
    
    [Design principles]
    Verifies proper LLM invocation and result handling for function docs.
    
    [Implementation details]
    Mocks the LLM invocation and tests the function documentation generation.
    """
    # Mock LLM response
    mock_response = {
        "updated_comment": '''"""
        [Function intent]
        Test function documentation.
        
        [Design principles]
        Test design principles.
        
        [Implementation details]
        Test implementation details.
        """'''
    }
    mock_invoke_llm.return_value = mock_response
    
    generator = DocumentationGeneratorAgent()
    
    # Test data
    file_content = "def test_function():\n    pass"
    definition = {
        "name": "test_function",
        "type": "function",
        "comments": "",
        "code": "def test_function():\n    pass"
    }
    file_metadata = {
        "language": "python",
        "file_type": "source_code"
    }
    
    result = generator._generate_function_documentation(file_content, definition, file_metadata)
    
    # Verify LLM was invoked
    mock_invoke_llm.assert_called_once()
    
    # Verify result structure
    assert "name" in result
    assert "type" in result
    assert "original_comment" in result
    assert "updated_comment" in result
    
    # Verify content
    assert result["name"] == "test_function"
    assert result["type"] == "function"
    assert "Function intent" in result["updated_comment"]
    assert "Design principles" in result["updated_comment"]
    assert "Implementation details" in result["updated_comment"]


def test_validate_documentation():
    """
    [Function intent]
    Test documentation validation against HSTC standards.
    
    [Design principles]
    Verifies correct identification of documentation compliance issues.
    
    [Implementation details]
    Tests validation with both valid and invalid documentation.
    """
    generator = DocumentationGeneratorAgent()
    
    # Add valid test data to generated_documentation
    generator.generated_documentation["valid_file.py"] = {
        "path": "valid_file.py",
        "file_type": "source_code",
        "language": "python",
        "file_header": {
            "intent": "Test intent",
            "design_principles": "Test principles",
            "constraints": "Test constraints",
            "dependencies": [],
            "change_history": [],
            "raw_header": "Test raw header"
        },
        "definitions": [
            {
                "name": "test_function",
                "type": "function",
                "original_comment": "Original comment",
                "updated_comment": '''"""
                [Function intent]
                Test function.
                
                [Design principles]
                Test principles.
                
                [Implementation details]
                Test details.
                """'''
            }
        ]
    }
    
    # Add invalid test data to generated_documentation
    generator.generated_documentation["invalid_file.py"] = {
        "path": "invalid_file.py",
        "file_type": "source_code",
        "language": "python",
        "file_header": {
            "intent": "",  # Empty intent
            "design_principles": "Test principles",
            "constraints": "Test constraints",
            "dependencies": [],
            "change_history": [],
            "raw_header": "Test raw header"
        },
        "definitions": [
            {
                "name": "test_function",
                "type": "function",
                "original_comment": "Original comment",
                "updated_comment": '''"""
                Missing intent and other sections.
                """'''
            }
        ]
    }
    
    # Test valid documentation
    valid_result = generator.validate_documentation("valid_file.py")
    
    assert "valid" in valid_result
    assert valid_result["valid"] is True
    assert "issues" in valid_result
    assert len(valid_result["issues"]) == 0
    
    # Test invalid documentation
    invalid_result = generator.validate_documentation("invalid_file.py")
    
    assert "valid" in invalid_result
    assert invalid_result["valid"] is False
    assert "issues" in invalid_result
    assert len(invalid_result["issues"]) > 0
    # Check that it found the empty intent issue
    assert any("intent" in issue.lower() for issue in invalid_result["issues"])


@patch("src.dbp_cli.commands.hstc_agno.agents.DocumentationGeneratorAgent._extract_header_sections")
@patch("src.dbp_cli.commands.hstc_agno.agents.DocumentationGeneratorAgent._generate_file_header")
@patch("src.dbp_cli.commands.hstc_agno.agents.DocumentationGeneratorAgent._generate_function_documentation")
def test_process_file_documentation(mock_gen_func_doc, mock_gen_header, mock_extract_sections):
    """
    [Function intent]
    Test the complete documentation generation workflow.
    
    [Design principles]
    Verifies integration of header and function documentation components.
    
    [Implementation details]
    Mocks the sub-components and tests the main processing method.
    """
    # Mock return values
    mock_extract_sections.return_value = {
        "intent": "Existing intent",
        "design_principles": "Existing principles",
        "constraints": "Existing constraints",
        "dependencies": [{"kind": "system", "dependency": "os"}],
        "change_history": ["2023-06-15T12:34:56Z : Previous change"],
        "raw_header": "Existing header"
    }
    
    mock_gen_header.return_value = {
        "intent": "Generated intent",
        "design_principles": "Generated principles",
        "constraints": "Generated constraints",
        "dependencies": [{"kind": "system", "dependency": "os"}],
        "change_history": ["2023-06-15T12:34:56Z : Generated change"],
        "raw_header": "Generated header"
    }
    
    mock_gen_func_doc.return_value = {
        "name": "test_function",
        "type": "function",
        "original_comment": "Original comment",
        "updated_comment": "Generated function comment"
    }
    
    generator = DocumentationGeneratorAgent()
    
    # Test data
    file_path = "test_file.py"
    file_metadata = {
        "path": file_path,
        "language": "python",
        "file_type": "source_code",
        "header_comment": "# Existing header comment",
        "definitions": [
            {
                "name": "test_function",
                "type": "function",
                "comments": "# Original comment",
                "code": "def test_function():\n    pass"
            }
        ]
    }
    dependency_metadata = {}
    
    mock_open = MagicMock(return_value=MagicMock(
        __enter__=MagicMock(return_value=MagicMock(
            read=MagicMock(return_value="def test_function():\n    pass")
        ))
    ))
    
    with patch('builtins.open', mock_open):
        result = generator.process_file_documentation(file_path, file_metadata, dependency_metadata)
    
    # Verify result structure
    assert "path" in result
    assert "file_type" in result
    assert "language" in result
    assert "file_header" in result
    assert "definitions" in result
    assert "documentation_updated" in result
    
    # Verify content
    assert result["path"] == file_path
    assert result["file_type"] == "source_code"
    assert result["language"] == "python"
    assert result["documentation_updated"] is True
    
    # Verify file is added to generated_documentation cache
    assert file_path in generator.generated_documentation


def test_clear_documentation():
    """
    [Function intent]
    Test clearing of cached documentation.
    
    [Design principles]
    Verifies proper cache reset functionality.
    
    [Implementation details]
    Adds test documentation to the cache, clears it, and verifies it's empty.
    """
    generator = DocumentationGeneratorAgent()
    
    # Add test data
    generator.generated_documentation["test_file.py"] = {
        "path": "test_file.py",
        "file_header": {"intent": "Test intent"},
        "definitions": []
    }
    
    # Clear documentation
    generator.clear_documentation()
    
    # Verify documentation is cleared
    assert generator.generated_documentation == {}
